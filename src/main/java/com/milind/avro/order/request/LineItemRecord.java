/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.milind.avro.order.request;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class LineItemRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6083413791633171518L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"LineItemRecord\",\"namespace\":\"com.milind.avro.order.request\",\"fields\":[{\"name\":\"sku\",\"type\":\"string\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"description\",\"type\":[\"string\",\"null\"]},{\"name\":\"category\",\"type\":\"string\"},{\"name\":\"other\",\"type\":[\"string\",\"null\"]},{\"name\":\"unitPrice\",\"type\":\"float\"},{\"name\":\"salePrice\",\"type\":\"float\"},{\"name\":\"quantity\",\"type\":\"int\"},{\"name\":\"totalPrice\",\"type\":\"float\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<LineItemRecord> ENCODER =
      new BinaryMessageEncoder<LineItemRecord>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<LineItemRecord> DECODER =
      new BinaryMessageDecoder<LineItemRecord>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<LineItemRecord> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<LineItemRecord> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<LineItemRecord> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<LineItemRecord>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this LineItemRecord to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a LineItemRecord from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a LineItemRecord instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static LineItemRecord fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence sku;
  @Deprecated public java.lang.CharSequence name;
  @Deprecated public java.lang.CharSequence description;
  @Deprecated public java.lang.CharSequence category;
  @Deprecated public java.lang.CharSequence other;
  @Deprecated public float unitPrice;
  @Deprecated public float salePrice;
  @Deprecated public int quantity;
  @Deprecated public float totalPrice;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public LineItemRecord() {}

  /**
   * All-args constructor.
   * @param sku The new value for sku
   * @param name The new value for name
   * @param description The new value for description
   * @param category The new value for category
   * @param other The new value for other
   * @param unitPrice The new value for unitPrice
   * @param salePrice The new value for salePrice
   * @param quantity The new value for quantity
   * @param totalPrice The new value for totalPrice
   */
  public LineItemRecord(java.lang.CharSequence sku, java.lang.CharSequence name, java.lang.CharSequence description, java.lang.CharSequence category, java.lang.CharSequence other, java.lang.Float unitPrice, java.lang.Float salePrice, java.lang.Integer quantity, java.lang.Float totalPrice) {
    this.sku = sku;
    this.name = name;
    this.description = description;
    this.category = category;
    this.other = other;
    this.unitPrice = unitPrice;
    this.salePrice = salePrice;
    this.quantity = quantity;
    this.totalPrice = totalPrice;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return sku;
    case 1: return name;
    case 2: return description;
    case 3: return category;
    case 4: return other;
    case 5: return unitPrice;
    case 6: return salePrice;
    case 7: return quantity;
    case 8: return totalPrice;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: sku = (java.lang.CharSequence)value$; break;
    case 1: name = (java.lang.CharSequence)value$; break;
    case 2: description = (java.lang.CharSequence)value$; break;
    case 3: category = (java.lang.CharSequence)value$; break;
    case 4: other = (java.lang.CharSequence)value$; break;
    case 5: unitPrice = (java.lang.Float)value$; break;
    case 6: salePrice = (java.lang.Float)value$; break;
    case 7: quantity = (java.lang.Integer)value$; break;
    case 8: totalPrice = (java.lang.Float)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'sku' field.
   * @return The value of the 'sku' field.
   */
  public java.lang.CharSequence getSku() {
    return sku;
  }


  /**
   * Sets the value of the 'sku' field.
   * @param value the value to set.
   */
  public void setSku(java.lang.CharSequence value) {
    this.sku = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.CharSequence getName() {
    return name;
  }


  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'description' field.
   * @return The value of the 'description' field.
   */
  public java.lang.CharSequence getDescription() {
    return description;
  }


  /**
   * Sets the value of the 'description' field.
   * @param value the value to set.
   */
  public void setDescription(java.lang.CharSequence value) {
    this.description = value;
  }

  /**
   * Gets the value of the 'category' field.
   * @return The value of the 'category' field.
   */
  public java.lang.CharSequence getCategory() {
    return category;
  }


  /**
   * Sets the value of the 'category' field.
   * @param value the value to set.
   */
  public void setCategory(java.lang.CharSequence value) {
    this.category = value;
  }

  /**
   * Gets the value of the 'other' field.
   * @return The value of the 'other' field.
   */
  public java.lang.CharSequence getOther() {
    return other;
  }


  /**
   * Sets the value of the 'other' field.
   * @param value the value to set.
   */
  public void setOther(java.lang.CharSequence value) {
    this.other = value;
  }

  /**
   * Gets the value of the 'unitPrice' field.
   * @return The value of the 'unitPrice' field.
   */
  public float getUnitPrice() {
    return unitPrice;
  }


  /**
   * Sets the value of the 'unitPrice' field.
   * @param value the value to set.
   */
  public void setUnitPrice(float value) {
    this.unitPrice = value;
  }

  /**
   * Gets the value of the 'salePrice' field.
   * @return The value of the 'salePrice' field.
   */
  public float getSalePrice() {
    return salePrice;
  }


  /**
   * Sets the value of the 'salePrice' field.
   * @param value the value to set.
   */
  public void setSalePrice(float value) {
    this.salePrice = value;
  }

  /**
   * Gets the value of the 'quantity' field.
   * @return The value of the 'quantity' field.
   */
  public int getQuantity() {
    return quantity;
  }


  /**
   * Sets the value of the 'quantity' field.
   * @param value the value to set.
   */
  public void setQuantity(int value) {
    this.quantity = value;
  }

  /**
   * Gets the value of the 'totalPrice' field.
   * @return The value of the 'totalPrice' field.
   */
  public float getTotalPrice() {
    return totalPrice;
  }


  /**
   * Sets the value of the 'totalPrice' field.
   * @param value the value to set.
   */
  public void setTotalPrice(float value) {
    this.totalPrice = value;
  }

  /**
   * Creates a new LineItemRecord RecordBuilder.
   * @return A new LineItemRecord RecordBuilder
   */
  public static com.milind.avro.order.request.LineItemRecord.Builder newBuilder() {
    return new com.milind.avro.order.request.LineItemRecord.Builder();
  }

  /**
   * Creates a new LineItemRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new LineItemRecord RecordBuilder
   */
  public static com.milind.avro.order.request.LineItemRecord.Builder newBuilder(com.milind.avro.order.request.LineItemRecord.Builder other) {
    if (other == null) {
      return new com.milind.avro.order.request.LineItemRecord.Builder();
    } else {
      return new com.milind.avro.order.request.LineItemRecord.Builder(other);
    }
  }

  /**
   * Creates a new LineItemRecord RecordBuilder by copying an existing LineItemRecord instance.
   * @param other The existing instance to copy.
   * @return A new LineItemRecord RecordBuilder
   */
  public static com.milind.avro.order.request.LineItemRecord.Builder newBuilder(com.milind.avro.order.request.LineItemRecord other) {
    if (other == null) {
      return new com.milind.avro.order.request.LineItemRecord.Builder();
    } else {
      return new com.milind.avro.order.request.LineItemRecord.Builder(other);
    }
  }

  /**
   * RecordBuilder for LineItemRecord instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<LineItemRecord>
    implements org.apache.avro.data.RecordBuilder<LineItemRecord> {

    private java.lang.CharSequence sku;
    private java.lang.CharSequence name;
    private java.lang.CharSequence description;
    private java.lang.CharSequence category;
    private java.lang.CharSequence other;
    private float unitPrice;
    private float salePrice;
    private int quantity;
    private float totalPrice;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.milind.avro.order.request.LineItemRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.sku)) {
        this.sku = data().deepCopy(fields()[0].schema(), other.sku);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.description)) {
        this.description = data().deepCopy(fields()[2].schema(), other.description);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.category)) {
        this.category = data().deepCopy(fields()[3].schema(), other.category);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.other)) {
        this.other = data().deepCopy(fields()[4].schema(), other.other);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.unitPrice)) {
        this.unitPrice = data().deepCopy(fields()[5].schema(), other.unitPrice);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.salePrice)) {
        this.salePrice = data().deepCopy(fields()[6].schema(), other.salePrice);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.quantity)) {
        this.quantity = data().deepCopy(fields()[7].schema(), other.quantity);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.totalPrice)) {
        this.totalPrice = data().deepCopy(fields()[8].schema(), other.totalPrice);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
    }

    /**
     * Creates a Builder by copying an existing LineItemRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(com.milind.avro.order.request.LineItemRecord other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.sku)) {
        this.sku = data().deepCopy(fields()[0].schema(), other.sku);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.description)) {
        this.description = data().deepCopy(fields()[2].schema(), other.description);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.category)) {
        this.category = data().deepCopy(fields()[3].schema(), other.category);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.other)) {
        this.other = data().deepCopy(fields()[4].schema(), other.other);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.unitPrice)) {
        this.unitPrice = data().deepCopy(fields()[5].schema(), other.unitPrice);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.salePrice)) {
        this.salePrice = data().deepCopy(fields()[6].schema(), other.salePrice);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.quantity)) {
        this.quantity = data().deepCopy(fields()[7].schema(), other.quantity);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.totalPrice)) {
        this.totalPrice = data().deepCopy(fields()[8].schema(), other.totalPrice);
        fieldSetFlags()[8] = true;
      }
    }

    /**
      * Gets the value of the 'sku' field.
      * @return The value.
      */
    public java.lang.CharSequence getSku() {
      return sku;
    }


    /**
      * Sets the value of the 'sku' field.
      * @param value The value of 'sku'.
      * @return This builder.
      */
    public com.milind.avro.order.request.LineItemRecord.Builder setSku(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.sku = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'sku' field has been set.
      * @return True if the 'sku' field has been set, false otherwise.
      */
    public boolean hasSku() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'sku' field.
      * @return This builder.
      */
    public com.milind.avro.order.request.LineItemRecord.Builder clearSku() {
      sku = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return name;
    }


    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public com.milind.avro.order.request.LineItemRecord.Builder setName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public com.milind.avro.order.request.LineItemRecord.Builder clearName() {
      name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'description' field.
      * @return The value.
      */
    public java.lang.CharSequence getDescription() {
      return description;
    }


    /**
      * Sets the value of the 'description' field.
      * @param value The value of 'description'.
      * @return This builder.
      */
    public com.milind.avro.order.request.LineItemRecord.Builder setDescription(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.description = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'description' field has been set.
      * @return True if the 'description' field has been set, false otherwise.
      */
    public boolean hasDescription() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'description' field.
      * @return This builder.
      */
    public com.milind.avro.order.request.LineItemRecord.Builder clearDescription() {
      description = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'category' field.
      * @return The value.
      */
    public java.lang.CharSequence getCategory() {
      return category;
    }


    /**
      * Sets the value of the 'category' field.
      * @param value The value of 'category'.
      * @return This builder.
      */
    public com.milind.avro.order.request.LineItemRecord.Builder setCategory(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.category = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'category' field has been set.
      * @return True if the 'category' field has been set, false otherwise.
      */
    public boolean hasCategory() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'category' field.
      * @return This builder.
      */
    public com.milind.avro.order.request.LineItemRecord.Builder clearCategory() {
      category = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'other' field.
      * @return The value.
      */
    public java.lang.CharSequence getOther() {
      return other;
    }


    /**
      * Sets the value of the 'other' field.
      * @param value The value of 'other'.
      * @return This builder.
      */
    public com.milind.avro.order.request.LineItemRecord.Builder setOther(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.other = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'other' field has been set.
      * @return True if the 'other' field has been set, false otherwise.
      */
    public boolean hasOther() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'other' field.
      * @return This builder.
      */
    public com.milind.avro.order.request.LineItemRecord.Builder clearOther() {
      other = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'unitPrice' field.
      * @return The value.
      */
    public float getUnitPrice() {
      return unitPrice;
    }


    /**
      * Sets the value of the 'unitPrice' field.
      * @param value The value of 'unitPrice'.
      * @return This builder.
      */
    public com.milind.avro.order.request.LineItemRecord.Builder setUnitPrice(float value) {
      validate(fields()[5], value);
      this.unitPrice = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'unitPrice' field has been set.
      * @return True if the 'unitPrice' field has been set, false otherwise.
      */
    public boolean hasUnitPrice() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'unitPrice' field.
      * @return This builder.
      */
    public com.milind.avro.order.request.LineItemRecord.Builder clearUnitPrice() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'salePrice' field.
      * @return The value.
      */
    public float getSalePrice() {
      return salePrice;
    }


    /**
      * Sets the value of the 'salePrice' field.
      * @param value The value of 'salePrice'.
      * @return This builder.
      */
    public com.milind.avro.order.request.LineItemRecord.Builder setSalePrice(float value) {
      validate(fields()[6], value);
      this.salePrice = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'salePrice' field has been set.
      * @return True if the 'salePrice' field has been set, false otherwise.
      */
    public boolean hasSalePrice() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'salePrice' field.
      * @return This builder.
      */
    public com.milind.avro.order.request.LineItemRecord.Builder clearSalePrice() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'quantity' field.
      * @return The value.
      */
    public int getQuantity() {
      return quantity;
    }


    /**
      * Sets the value of the 'quantity' field.
      * @param value The value of 'quantity'.
      * @return This builder.
      */
    public com.milind.avro.order.request.LineItemRecord.Builder setQuantity(int value) {
      validate(fields()[7], value);
      this.quantity = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'quantity' field has been set.
      * @return True if the 'quantity' field has been set, false otherwise.
      */
    public boolean hasQuantity() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'quantity' field.
      * @return This builder.
      */
    public com.milind.avro.order.request.LineItemRecord.Builder clearQuantity() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalPrice' field.
      * @return The value.
      */
    public float getTotalPrice() {
      return totalPrice;
    }


    /**
      * Sets the value of the 'totalPrice' field.
      * @param value The value of 'totalPrice'.
      * @return This builder.
      */
    public com.milind.avro.order.request.LineItemRecord.Builder setTotalPrice(float value) {
      validate(fields()[8], value);
      this.totalPrice = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'totalPrice' field has been set.
      * @return True if the 'totalPrice' field has been set, false otherwise.
      */
    public boolean hasTotalPrice() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'totalPrice' field.
      * @return This builder.
      */
    public com.milind.avro.order.request.LineItemRecord.Builder clearTotalPrice() {
      fieldSetFlags()[8] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public LineItemRecord build() {
      try {
        LineItemRecord record = new LineItemRecord();
        record.sku = fieldSetFlags()[0] ? this.sku : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.name = fieldSetFlags()[1] ? this.name : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.description = fieldSetFlags()[2] ? this.description : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.category = fieldSetFlags()[3] ? this.category : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.other = fieldSetFlags()[4] ? this.other : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.unitPrice = fieldSetFlags()[5] ? this.unitPrice : (java.lang.Float) defaultValue(fields()[5]);
        record.salePrice = fieldSetFlags()[6] ? this.salePrice : (java.lang.Float) defaultValue(fields()[6]);
        record.quantity = fieldSetFlags()[7] ? this.quantity : (java.lang.Integer) defaultValue(fields()[7]);
        record.totalPrice = fieldSetFlags()[8] ? this.totalPrice : (java.lang.Float) defaultValue(fields()[8]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<LineItemRecord>
    WRITER$ = (org.apache.avro.io.DatumWriter<LineItemRecord>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<LineItemRecord>
    READER$ = (org.apache.avro.io.DatumReader<LineItemRecord>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.sku);

    out.writeString(this.name);

    if (this.description == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeString(this.description);
    }

    out.writeString(this.category);

    if (this.other == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeString(this.other);
    }

    out.writeFloat(this.unitPrice);

    out.writeFloat(this.salePrice);

    out.writeInt(this.quantity);

    out.writeFloat(this.totalPrice);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.sku = in.readString(this.sku instanceof Utf8 ? (Utf8)this.sku : null);

      this.name = in.readString(this.name instanceof Utf8 ? (Utf8)this.name : null);

      if (in.readIndex() != 0) {
        in.readNull();
        this.description = null;
      } else {
        this.description = in.readString(this.description instanceof Utf8 ? (Utf8)this.description : null);
      }

      this.category = in.readString(this.category instanceof Utf8 ? (Utf8)this.category : null);

      if (in.readIndex() != 0) {
        in.readNull();
        this.other = null;
      } else {
        this.other = in.readString(this.other instanceof Utf8 ? (Utf8)this.other : null);
      }

      this.unitPrice = in.readFloat();

      this.salePrice = in.readFloat();

      this.quantity = in.readInt();

      this.totalPrice = in.readFloat();

    } else {
      for (int i = 0; i < 9; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.sku = in.readString(this.sku instanceof Utf8 ? (Utf8)this.sku : null);
          break;

        case 1:
          this.name = in.readString(this.name instanceof Utf8 ? (Utf8)this.name : null);
          break;

        case 2:
          if (in.readIndex() != 0) {
            in.readNull();
            this.description = null;
          } else {
            this.description = in.readString(this.description instanceof Utf8 ? (Utf8)this.description : null);
          }
          break;

        case 3:
          this.category = in.readString(this.category instanceof Utf8 ? (Utf8)this.category : null);
          break;

        case 4:
          if (in.readIndex() != 0) {
            in.readNull();
            this.other = null;
          } else {
            this.other = in.readString(this.other instanceof Utf8 ? (Utf8)this.other : null);
          }
          break;

        case 5:
          this.unitPrice = in.readFloat();
          break;

        case 6:
          this.salePrice = in.readFloat();
          break;

        case 7:
          this.quantity = in.readInt();
          break;

        case 8:
          this.totalPrice = in.readFloat();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










